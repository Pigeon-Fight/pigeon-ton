;; Pigeon NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress 
;;           next_item_index:uint64
;;           item_dict:(dict 8 [int128 uint16 uint16])
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:Cell
;;           royalty_params:RoyaltyParams
;;           = Storage;

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

;; CONSTANTs
int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON
int tons_in_nft_item() asm "50000000 PUSHINT"; ;; 0.05 TON

;; ERRORs
const error::not_enough_balance = 400;
const error::not_exist = 404;
const error::unauthorized = 403;

;; OPCODEs
;; CRC32 Hashing Tool : https://docs.ton.org/develop/data-formats/crc32
const op::change_owner = "op::change_owner"c;
const op::purchase = "op::purchase"c;
const op::withdraw = "op::withdraw"c;
const op::update_item = "op::update_item"c;

(slice, int, cell, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; item_dict
     ds~load_ref(), ;; content [collection_content + common_content]
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}

() save_data(slice owner_address, int next_item_index, cell item_dict, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(item_dict)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, slice owner, int class, slice item_slice) impure {
  cell state_init = calculate_nft_item_state_init(item_index, my_address(), nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  
  cell body = begin_cell()
                .store_slice(owner)
                .store_uint(class, 8)
                .store_slice(item_slice)
                .store_ref(nft_item_code)
            .end_cell();

  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            ;; 4 + 2 => init-field flag (Option)
            ;; 1 => inplace message body flag
            .store_ref(state_init)
            .store_ref(body); ;; owner_address + class + nft_item_code
  send_raw_message(msg.end_cell(), 0); ;; revert on errors
}

() heal_nft(int item_index, cell nft_item_code, slice heal_value) impure {
  cell state_init = calculate_nft_item_state_init(item_index, my_address(), nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);

  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            ;; body
            .store_uint(op::heal, 32) ;; opcode
            .store_uint(0, 64) ;; query id
            .store_slice(heal_value);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, item_dict, content, nft_item_code, royalty_params) = load_data();

    ;; public OPcodes
    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }
    if (op == op::purchase) { ;; purchase
        ;; load input
        int class = in_msg_body~load_uint(8);
        var (item_slice, found) = udict_get?(item_dict, 8, class);
        throw_unless(error::not_exist, found);

        ;; Convert slice to price int128
        int price = item_slice~load_coins();
        
        ;; purchase nft: class <= 44; 
        if (class <= 44) {
            ;; check price
            throw_unless(error::not_enough_balance, msg_value > price + tons_in_nft_item());
            int coin_amount = msg_value - price;

            deploy_nft_item(next_item_index, nft_item_code, coin_amount, sender_address, class, item_slice);
            next_item_index += 1;
            save_data(owner_address, next_item_index, item_dict, content, nft_item_code, royalty_params);
            return ();
        }

        ;; purchase healling: item > 44
        if (class > 44) {
            ;; check price
            throw_unless(error::not_enough_balance, msg_value > price);
            int coin_amount = msg_value - price;

            int item_index = in_msg_body~load_uint(64);
            heal_nft(item_index, nft_item_code, item_slice);
            return ();
        }
    }

    ;; Authorized OPcodes
    throw_unless(error::unauthorized, equal_slices(sender_address, owner_address));
    if (op == op::change_owner) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, item_dict, content, nft_item_code, royalty_params);
        return ();
    }
    if (op == op::withdraw) { ;; withdraw
        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(error::not_enough_balance, balance >= withdraw_amount);

        ;; keep minimum ton for storage
        int return_value = min(withdraw_amount, balance - min_tons_for_storage());

        ;; sending internal message
        ;; https://docs.ton.org/develop/smart-contracts/messages
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            ;; .store_slice(message_body)
            .end_cell();

        int msg_mode = 1; ;; 0 (Ordinal Message) + 1 (Pay transfer seperately)
        
        send_raw_message(msg, msg_mode);
        return ();
    }
    if (op == op::update_item) { ;; update item
        ;; check access right
        int class = in_msg_body~load_uint(8);
        udict_set(item_dict, 8, class, in_msg_body);
        
        save_data(
            owner_address, next_item_index, item_dict, content, nft_item_code, royalty_params
        );
    }
    

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, _, content, _, _) = load_data();
  slice cs = content.begin_parse(); ;; collection_content
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, my_address(), nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, _, royalty) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, _, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref(); ;; ignore collection_content
    slice common_content = cs~load_ref().begin_parse();

    return (begin_cell()
            .store_uint(1, 8) ;; 0 = onchain tag, 1 = offchain tag
            .store_slice(common_content)
            .store_ref(individual_nft_content)
          .end_cell());
}

(int, int, int) get_item_data(int item_id) method_id {
  var (_, _, item_dict, _, _, _) = load_data();
  var (item_slice, found) = udict_get?(item_dict, 8, item_id);
  if (found) {
    return (item_slice~load_coins(), item_slice~load_uint(16), item_slice~load_uint(16));
  }
  return (0, 0, 0);
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}