;;
;;  TON NFT Item Smart Contract v2
;;  support ownership_assigned on minting nft
;;


;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  uint8  class
;;;;  Stats
;;  uint16 current_hp
;;  uint16 current_energy
;;  uint16 exp
;;  uint16 allocated_point
;;  uint16 stat_atk
;;  uint16 stat_def
;;  uint16 stat_spd
;;  uint16 max_hp
;;  uint16 max_energy
;;;; 144 bits
;;  Cell nft_item_code 

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON
int workchain() asm "0 PUSHINT";

;; Opcodes
const op::upgrade = "op::upgrade"c;
const op::battle = "op::battle"c;
const op::challenge = "op::challenge"c;
const op::battle_end = "op::battle_end"c;

;; Constants
const const::min_tons_for_storage = 10000000; ;; 0.01 TON
const const::uint16_max = 65535;
const const::uint24_max = 16777215;
const const::base_exp = 10;

;; Errors
const error::unauthorized = 401;
const error::not_enough_balance = 402;
const error::deploy_failed = 405;
const error::invalid_points = 406;
const error::no_hp = 410;
const error::invalid_opponent = 411;

(int, int, slice, slice, int, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    int index = ds~load_uint(64);
    slice collection_address = ds~load_msg_addr();
    if (ds.slice_bits() > 0) {
      int class = ds~load_uint(8);
      slice owner_address = ds~load_msg_addr();
      slice stats = ds~load_bits(144);
      cell nft_item_code = ds~load_ref();
      return (-1, index, collection_address, owner_address, class, stats, ds~load_ref());
    } else {
      return (0, index, collection_address, null(), 0, null(), null()); ;; nft not initialized yet
    }
}

() store_data(int index, int class, slice stats, slice collection_address, slice owner_address, cell nft_item_code) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_uint(class, 8)
            .store_slice(stats)
            .store_ref(nft_item_code)
            .end_cell()
    );
}

int exp_to_point(int exp) inline {
  return 3 * (exp - const::base_exp) / 50;
}

int safe_add_16(int a, int b) inline {
    if (a > const::uint16_max - b) {
        return const::uint16_max;
    }
    return a + b; 
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int class, slice stats, int index, slice collection_address, slice owner_address, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, cell nft_item_code) impure inline {
    throw_unless(error::unauthorized, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(error::not_enough_balance, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, class, stats, collection_address, new_owner_address, nft_item_code);
}

(int, int, int, int, int, int, int, int, int) get_stats(slice stats) inline {
  int current_hp = stats~load_uint(16);
  int current_energy = stats~load_uint(16);
  int exp = stats~load_uint(16);
  int allocated_point = stats~load_uint(16);
  int atk = stats~load_uint(16);
  int def = stats~load_uint(16);
  int spd = stats~load_uint(16);
  int max_hp = stats~load_uint(16);
  int max_energy = stats~load_uint(16);
  return (current_hp, current_energy, exp, allocated_point, atk, def, spd, max_hp, max_energy);
}

slice build_stats(
  int current_hp,
  int current_energy,
  int exp,
  int allocated_point,
  int atk,
  int def,
  int spd,
  int max_hp,
  int max_energy
) inline {
  return begin_cell()
              .store_uint(current_hp, 16) ;; current_hp
              .store_uint(current_energy, 16) ;; current_energy
              .store_uint(exp, 16) ;; exp
              .store_uint(allocated_point, 16) ;; allocatated point
              .store_uint(atk, 16) ;; atk
              .store_uint(def, 16) ;; def
              .store_uint(spd, 16) ;; spd
              .store_uint(max_hp, 16) ;; max_hp
              .store_uint(max_energy, 16) ;; max_energy
            .end_cell().begin_parse();
}

(int, int, int, int) attack(
  int attacker_current_energy,
  int attacker_atk,
  int attacker_def,
  int defender_def,
  int defender_hp
) {
  ;; energy run out => weak status
  if (attacker_current_energy <= 0) {
    attacker_atk /= 2;
    attacker_def /= 2;
  }

  ;; hp_lost min should be 1
  int hp_lost = max(1, attacker_atk - defender_def);
  defender_hp -= hp_lost;
  if (defender_hp < 0) {
    defender_hp = 0;
  }

  if (attacker_current_energy > 1) {
    attacker_current_energy -= 1;
  }

  return (attacker_current_energy, attacker_atk, attacker_def, defender_hp);
}

(int, int, int, int, int) turn(
  int action_threshold,
  int a_action_points, int b_action_points, 
  int a_atk, int b_atk,
  int a_def, int b_def, 
  int a_spd, int b_spd, 
  int a_current_hp, int b_current_hp,
  int a_current_energy, int b_current_energy
) {
  a_action_points += a_spd;
  b_action_points += b_spd;

  if (a_action_points >= action_threshold) {
    if (a_current_hp > 0) {
      (
        a_current_energy,
        a_atk,
        a_def,
        b_current_hp
      ) = attack(
        a_current_energy,
        a_atk,
        a_def,
        b_def,
        b_current_hp
      );
      a_action_points -= action_threshold;
    }
  }

  if (b_action_points >= action_threshold) {
    if (b_current_hp > 0) {
      (
        b_current_energy,
        b_atk,
        b_def,
        a_current_hp
      ) = attack(
        b_current_energy,
        b_atk,
        b_def,
        a_def,
        a_current_hp
      );
      b_action_points -= action_threshold;
    }
  }

  if (a_current_hp <= 0) {
    ;; lose
    return (0, 0, a_current_energy, b_current_hp, b_current_energy);
  }
  if (b_current_hp <= 0) {
    ;; win
    return (-1, a_current_hp, a_current_energy, 0, b_current_energy);
  }

  return turn(
    action_threshold,
    a_action_points, b_action_points, 
    a_atk, b_atk, 
    a_def, b_def, 
    a_spd, b_spd, 
    a_current_hp, b_current_hp,
    a_current_energy, b_current_energy
  );
}

;; result = 0 (I Win); = 1 (Opponent Win)
;; my_new_stats, op_new_stats
(int, slice, slice) battle(
  slice my_stats, slice op_stats
) {
  var (
    a_current_hp, a_current_energy, a_exp, 
    a_allocated_point, a_atk, a_def, a_spd, 
    a_max_hp, a_max_energy
  ) = get_stats(my_stats);
  var (
    b_current_hp, b_current_energy, b_exp, 
    b_allocated_point, b_atk, b_def, b_spd, 
    b_max_hp, b_max_energy
  ) = get_stats(op_stats);

  int action_threshold = max(a_spd, b_spd);
  
  ;; first turn
  (
    int result, 
    a_current_hp, a_current_energy, 
    b_current_hp, b_current_energy
  ) = turn(
    action_threshold,
    0, 0, 
    a_atk, b_atk, 
    a_def, b_def, 
    a_spd, b_spd, 
    a_current_hp, b_current_hp,
    a_current_energy, b_current_energy
  );

  ;; gain xp if win
  int gain_xp = 10 * (1 + (b_exp - a_exp) / 540);

  if (result) {
    if (gain_xp > 0) {
      a_exp += gain_xp;
    }
  } else {
    if (gain_xp < 0) {
      b_exp -= gain_xp;
    }
  }

  slice my_new_stats = build_stats(
    a_current_hp, a_current_energy, a_exp, 
    a_allocated_point, a_atk, a_def, a_spd, 
    a_max_hp, a_max_energy
  );

  slice op_new_stats = build_stats(
    b_current_hp, b_current_energy, b_exp, 
    b_allocated_point, b_atk, b_def, b_spd, 
    b_max_hp, b_max_energy
  );

  return (result, my_new_stats, op_new_stats);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    (
      int init?, 
      int index, 
      slice collection_address, 
      slice owner_address, 
      int class, 
      slice stats, 
      cell nft_item_code
    ) = load_data();

    if (~ init?) {
      throw_unless(error::deploy_failed, equal_slices(collection_address, sender_address));
      owner_address = in_msg_body~load_msg_addr();
      class = in_msg_body~load_uint(8);
      nft_item_code = in_msg_body~load_ref();
      stats = build_stats(10, 10, 0, 0, 1, 1, 1, 10, 10);
      store_data(index, class, stats, collection_address, owner_address, nft_item_code);
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(my_balance, class, stats, index, collection_address, owner_address, sender_address, query_id, in_msg_body, fwd_fee, nft_item_code);
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    if (op == op::upgrade) {
      var (
        current_hp, current_energy, exp, 
        allocated_point, atk, def, spd, 
        max_hp, max_energy
      ) = get_stats(stats);

      ;; update allocated_point
      int total_point = exp_to_point(exp);

      int atk_point = in_msg_body~load_uint(16);
      int def_point = in_msg_body~load_uint(16);
      int spd_point = in_msg_body~load_uint(16);
      int max_hp_point = in_msg_body~load_uint(16);
      int max_energy_point = in_msg_body~load_uint(16);
      int total_new_point = atk_point + def_point + spd_point + max_hp_point + max_energy_point;

      throw_unless(error::invalid_points, total_new_point <= total_point - allocated_point);
      allocated_point = allocated_point + total_new_point;

      atk = safe_add_16(atk, atk_point);
      def = safe_add_16(def, def_point);
      spd = safe_add_16(spd, spd_point);
      max_hp = safe_add_16(max_hp, max_hp_point);
      current_hp = safe_add_16(current_hp, max_hp_point);
      max_energy = safe_add_16(max_energy, max_energy_point);
      current_energy = safe_add_16(current_energy, max_energy_point);

      slice new_stats = build_stats(
        current_hp,
        current_energy,
        exp,
        allocated_point,
        atk,
        def,
        spd,
        max_hp,
        max_energy
      );

      ;; evolution
      if (class <= 36) {
        ;; second evolution
        if (class <= 18) {
          if (allocated_point >= 310) {
            class *= 2;
          }
        }
        ;; first evolution
        if (class <= 10) {
          if (allocated_point >= 160) {
            class *= 2;
          }
        }
      }

      store_data(index, class, new_stats, collection_address, owner_address, nft_item_code);
    }

    if (op == op::battle) {
      throw_unless(error::unauthorized, equal_slices(sender_address, owner_address));

      slice opponent_address = in_msg_body~load_msg_addr();
      throw_if(error::invalid_opponent, equal_slices(sender_address, opponent_address));

      int current_hp = stats~load_uint(16);
      throw_unless(error::no_hp, current_hp > 0);

      send_msg(
        opponent_address, ;; destination
        0, ;; amount
        op::challenge, ;; opcode
        0, ;; query id
        begin_cell().store_uint(index, 64).store_slice(stats), ;; 0: challenge, 1: challenge accept
        64 ;; mode: carry all the remaining value of the inbound message
      );  
    }

    if (op == op::challenge) {
      ;; Check if the message send from other nft
      int nft_opponent_index = in_msg_body~load_uint(8);

      cell state_init = calculate_nft_item_state_init(nft_opponent_index, nft_item_code);
      slice nft_sender_address = calculate_nft_item_address(workchain(), state_init);
      throw_unless(error::unauthorized, equal_slices(sender_address, nft_sender_address));

      slice nft_opponent_stats = in_msg_body~load_bits(144);
      ;; Battle
      (
        int result, 
        slice my_stats, slice op_stats
      ) = battle(stats, nft_opponent_stats);
      
      ;; Update my stats
      store_data(index, class, my_stats, collection_address, owner_address, nft_item_code);

      ;; return battle result
      send_msg(
        sender_address, ;; destination
        0, ;; amount
        op::battle_end, ;; opcode
        0, ;; query id
        begin_cell().store_uint(index, 8).store_slice(op_stats),
        64 ;; mode: carry all the remaining value of the inbound message
      );
    }

    if (op == op::battle_end) {
      ;; Check if the message send from other nft
      int nft_opponent_index = in_msg_body~load_uint(8);

      cell state_init = calculate_nft_item_state_init(nft_opponent_index, nft_item_code);
      slice nft_sender_address = calculate_nft_item_address(workchain(), state_init);
      throw_unless(error::unauthorized, equal_slices(sender_address, nft_sender_address));

      slice my_new_stats = in_msg_body~load_bits(144);
      ;; Update my stats
      store_data(index, class, my_new_stats, collection_address, owner_address, nft_item_code);
    }

    if (op == op::heal) {
      ;; Check if the message send from the collection smc
      throw_unless(error::unauthorized, equal_slices(sender_address, collection_address));

      var (
        current_hp, current_energy, exp, 
        allocated_point, atk, def, spd, 
        max_hp, max_energy
      ) = get_stats(stats);

      int heal_hp = in_msg_body~load_uint(16);
      int heal_energy = in_msg_body~load_uint(16);

      current_hp += (max_hp * heal_hp / 100);
      current_energy += (max_energy * heal_energy / 100);

      current_hp = min(current_hp, max_hp);
      current_energy = min(current_energy, max_energy);

      slice new_stats = build_stats(
        current_hp,
        current_energy,
        exp,
        allocated_point,
        atk,
        def,
        spd,
        max_hp,
        max_energy
      );

      store_data(index, class, new_stats, collection_address, owner_address, nft_item_code);
    }

    throw(0xffff);
}

cell number_to_ascii_cell(int class) {
  int tens = class / 10;
  int units = class % 10;

  var ds = begin_cell();
  if (tens > 0) {
    ds.store_uint(tens + 48, 8);
  }
  ds.store_uint(units + 48, 8).end_cell();

  return ds.store_uint(units + 48, 8).end_cell();
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  (
      int init?, 
      int index, 
      slice collection_address, 
      slice owner_address, 
      int class,
      _, 
      _
    ) = load_data();
  return (init?, index, collection_address, owner_address, number_to_ascii_cell(class));
}

(int, int, int, int, int, int, int, int, int) get_nft_stats() method_id {
  (
    _, 
    _, 
    _, 
    _, 
    _, 
    slice stats, 
    _
  ) = load_data();
  return get_stats(stats);
}

int get_nft_class() method_id {
  (
    _, 
    _, 
    _, 
    _, 
    int class, 
    _, 
    _
  ) = load_data();
  return class;
}